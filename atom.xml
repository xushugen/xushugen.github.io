<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若、只如初见</title>
  
  <subtitle>我就是我不一样的烟火</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xushugen.github.io/"/>
  <updated>2018-09-22T06:38:35.699Z</updated>
  <id>https://xushugen.github.io/</id>
  
  <author>
    <name>Xu Shugen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正能量</title>
    <link href="https://xushugen.github.io/2018/09/22/%E6%AD%A3%E8%83%BD%E9%87%8F/"/>
    <id>https://xushugen.github.io/2018/09/22/正能量/</id>
    <published>2018-09-22T06:18:58.000Z</published>
    <updated>2018-09-22T06:38:35.699Z</updated>
    
    <content type="html"><![CDATA[<ol><li>别老去在意昨天发生了什么，别老质疑自己的未来是否光明，兄弟，昨天的太阳晒不干今天的衣服，把握好今天就够了。</li><li>别人落难的时候，你拼了命的帮，当你落难的时候，别人拼了命的笑，这就是现实。在你辉煌的时候，你的朋友认识了你，当你落魄的时候，你还需要重新的去认识下你的朋友。</li><li>没人在乎你的落魄，没人在乎你的低沉，更没有人在乎你的孤单，但每个人都会仰视你的辉煌，天空不会因为一个人的眼泪而布满乌云，世界更不会因为缺少谁而失去色彩，加油。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;别老去在意昨天发生了什么，别老质疑自己的未来是否光明，兄弟，昨天的太阳晒不干今天的衣服，把握好今天就够了。&lt;/li&gt;
&lt;li&gt;别人落难的时候，你拼了命的帮，当你落难的时候，别人拼了命的笑，这就是现实。在你辉煌的时候，你的朋友认识了你，当你落魄的时候，你还需要重新
      
    
    </summary>
    
      <category term="励志正能量" scheme="https://xushugen.github.io/categories/%E5%8A%B1%E5%BF%97%E6%AD%A3%E8%83%BD%E9%87%8F/"/>
    
    
      <category term="正能量" scheme="https://xushugen.github.io/tags/%E6%AD%A3%E8%83%BD%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>奋斗名言</title>
    <link href="https://xushugen.github.io/2018/09/22/%E5%A5%8B%E6%96%97%E5%90%8D%E8%A8%80/"/>
    <id>https://xushugen.github.io/2018/09/22/奋斗名言/</id>
    <published>2018-09-22T06:12:36.000Z</published>
    <updated>2018-09-22T06:47:59.724Z</updated>
    
    <content type="html"><![CDATA[<ol><li>如果有人在背后诋毁你，议论你，你不应该生气，反而应该高兴，这说明你过得比他好，保持住你的气场，你越不理会，他们越无能为力。</li><li>技术才是未来真正的红利，如果你没有独特的技术，靠规模，靠低成本，靠质量，不管你是互联网还是实体经济都会倒掉。</li><li>你可以穷，但是不能认输，一切都是你拼来的，即使现在一无所有被人嘲笑，但这只是现在，早晚有一天你会出头的，让别人刮目相看。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;如果有人在背后诋毁你，议论你，你不应该生气，反而应该高兴，这说明你过得比他好，保持住你的气场，你越不理会，他们越无能为力。&lt;/li&gt;
&lt;li&gt;技术才是未来真正的红利，如果你没有独特的技术，靠规模，靠低成本，靠质量，不管你是互联网还是实体经济都会倒掉。&lt;/li&gt;

      
    
    </summary>
    
      <category term="励志正能量" scheme="https://xushugen.github.io/categories/%E5%8A%B1%E5%BF%97%E6%AD%A3%E8%83%BD%E9%87%8F/"/>
    
    
      <category term="奋斗" scheme="https://xushugen.github.io/tags/%E5%A5%8B%E6%96%97/"/>
    
  </entry>
  
  <entry>
    <title>励志</title>
    <link href="https://xushugen.github.io/2018/09/22/%E5%8A%B1%E5%BF%97/"/>
    <id>https://xushugen.github.io/2018/09/22/励志/</id>
    <published>2018-09-22T05:47:04.000Z</published>
    <updated>2018-09-22T06:40:32.713Z</updated>
    
    <content type="html"><![CDATA[<ol><li>什么清华北大不如胆子大，什么哈佛耶鲁不如自己敢闯，因为机会是闯出来的，哪有算出来的。</li><li>人本身就穷，折腾对了就成了富人，折腾不对，大不了还是穷人，如果不折腾，一辈子都是穷人！</li><li>穷要穷的有骨气，富要富的有良心，再穷别卖看家狗，再富别弃结发妻，再难别骗身边人。</li><li>别喊穷，因为没有人会给你钱，别喊累，因为没有人会替你承受，不要哭泣，因为没有人会在乎，如果有什么不开心，也不要轻易的对别人说，因为别人会嘲笑你的。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;什么清华北大不如胆子大，什么哈佛耶鲁不如自己敢闯，因为机会是闯出来的，哪有算出来的。&lt;/li&gt;
&lt;li&gt;人本身就穷，折腾对了就成了富人，折腾不对，大不了还是穷人，如果不折腾，一辈子都是穷人！&lt;/li&gt;
&lt;li&gt;穷要穷的有骨气，富要富的有良心，再穷别卖看家狗，再富
      
    
    </summary>
    
      <category term="励志正能量" scheme="https://xushugen.github.io/categories/%E5%8A%B1%E5%BF%97%E6%AD%A3%E8%83%BD%E9%87%8F/"/>
    
    
      <category term="职场励志" scheme="https://xushugen.github.io/tags/%E8%81%8C%E5%9C%BA%E5%8A%B1%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="https://xushugen.github.io/2018/09/22/%E6%B5%8B%E8%AF%95/"/>
    <id>https://xushugen.github.io/2018/09/22/测试/</id>
    <published>2018-09-22T05:47:04.000Z</published>
    <updated>2018-12-03T08:22:54.536Z</updated>
    
    <content type="html"><![CDATA[<ol><li>测试测试</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;测试测试&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="测试" scheme="https://xushugen.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="https://xushugen.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>10亿级订单系统分库分表设计思路</title>
    <link href="https://xushugen.github.io/2018/09/22/10%E4%BA%BF%E7%BA%A7%E8%AE%A2%E5%8D%95%E7%B3%BB%E7%BB%9F%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/"/>
    <id>https://xushugen.github.io/2018/09/22/10亿级订单系统分库分表设计思路/</id>
    <published>2018-09-22T01:35:34.000Z</published>
    <updated>2018-09-22T02:23:05.382Z</updated>
    
    <content type="html"><![CDATA[<p><img src="\images\depotsTable\depots0.png" alt=""></p><h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a><strong>一、背景</strong></h1><p>随着公司业务增长，如果每天1000多万笔订单的话，3个月将有约10亿的订单量，之前数据库采用单库单表的形式已经不满足于业务需求，数据库改造迫在眉睫。</p><h1 id="二、订单数据如何划分"><a href="#二、订单数据如何划分" class="headerlink" title="二、订单数据如何划分"></a><strong>二、订单数据如何划分</strong></h1><p>我们可以将订单数据划分成两大类型：分别是热数据和冷数据。</p><p>热数据：3个月内的订单数据，查询实时性较高;</p><p>冷数据A：3个月 ~ 12个月前的订单数据，查询频率不高;</p><p>冷数据B：1年前的订单数据，几乎不会查询，只有偶尔的查询需求;</p><p>可能这里有个疑惑为什么要将冷数据分成两类，因为根据实际场景需求，用户基本不会去查看1年前的数据，如果将这部分数据还存储在db中，那么成本会非常高，而且也不便于维护。另外如果真遇到有个别用户需要查看1年前的订单信息，可以让用户走离线数据查看。</p><p>对于这三类数据的存储，目前规划如下：</p><ul><li><p>热数据： 使用mysql进行存储，当然需要分库分表；</p></li><li><p>冷数据A: 对于这类数据可以存储在ES中，利用搜索引擎的特性基本上也可以做到比较快的查询；</p></li><li><p>冷数据B: 对于这类不经常查询的数据，可以存放到Hive中；</p></li></ul><h1 id="三、MySql-如何分库分表"><a href="#三、MySql-如何分库分表" class="headerlink" title="三、MySql 如何分库分表"></a><strong>三、MySql 如何分库分表</strong></h1><p><strong>3.1、按业务拆分</strong></p><p>在业务初始阶段，为了加快应用上线和快速迭代，很多应用都采用集中式的架构。但是随着业务系统的扩大，系统匾额越来越复杂，越来越难以维护，开发效率变得越来越低，并且对资源的消耗也变得越来越大，通过硬件提高系统性能的成本会变得更高。</p><p>通常一般的电商平台，包含了用户、商品、订单等几大模块，简单的做法是在同一个库中分别建4张表，如下图所示：</p><p><img src="\images\depotsTable\depots1.png" alt=""></p><p>但是随着业务的提升，将所有业务都放在一个库中已经变得越来越难以维护，因此我们建议，将不同业务放在不同的库中，如下图所示：</p><p><img src="\images\depotsTable\depots2.png" alt=""></p><p>由图中我们可以看出，我们将不同的业务放到不同的库中，将原来所有压力由同一个库中分散到不同的库中，提升了系统的吞吐量。</p><p><strong>3.2、分库与分表</strong></p><p>我们知道每台机器无论配置多么好它都有自身的物理上限，所以当我们应用已经能触及或远远超出单台机器的某个上限的时候，我们惟有寻找别的机器的帮助或者继续升级的我们的硬件，但常见的方案还是通过添加更多的机器来共同承担压力。</p><p>我们还得考虑当我们的业务逻辑不断增长，我们的机器能不能通过线性增长就能满足需求？因此，使用数据库的分库分表，能够立竿见影的提升系统的性能，关于为什么要使用数据库的分库分表的其他原因这里不再赘述，主要讲具体的实现策略。</p><p><strong>（1）分表策略</strong></p><p>我们以订单表为例，在订单表中，订单id肯定是不可重复的，因此将该字段当做shard key 是非常适合的,其他表类似。假设订单表的字段如下：</p><p><img src="\images\depotsTable\depots3.png" alt=""></p><p>1create table order(2 order_id bigint(11) ,3</p><p>我们假设预估单个库需要分配100个表满足我们的业务需求，我们可以简单的取模计算出订单在哪个子表中，例如： order_id % 100,</p><p><img src="\images\depotsTable\depots4.png" alt=""></p><p>这时候可能会有人问了，如果我根据order_id 进行分表规则，但是我想根据user_id 查询相应的订单，不是定位不到哪个子表了吗，的确是这样，一旦确定shard key，就只能根据shard key定位到子表进而查询该子表下的数据；如果确实想根据user_id 去查询相关订单，那应该将shard key设置为user_id, 那分表规则也相应的变更为： user_id % 100;</p><p><strong>（2）分库实现策略</strong></p><p>数据库分表能够解决单表数据量很大的时候数据查询的效率问题，但是无法给数据库的并发操作带来效率上的提高，因为分表的实质还是在一个数据库上进行的操作，很容易受数据库IO性能的限制。</p><p>因此，如何将数据库IO性能的问题平均分配出来，很显然将数据进行分库操作可以很好地解决单台数据库的性能问题。</p><p>分库策略与分表策略的实现很相似，最简单的都是可以通过取模的方式进行路由。</p><p>我们还是以order表举例，</p><p>例如：order_id % 库容量,</p><p>如果order_id 不是整数类型，可以先hash 在进行取模，</p><p>例如： hash(order_id) % 库容量</p><p><strong>（3）分库分表结合使用策略</strong></p><p>数据库分表可以解决单表海量数据的查询性能问题，分库可以解决单台数据库的并发访问压力问题。有时候，我们需要同时考虑这两个问题，因此，我们既需要对单表进行分表操作，还需要进行分库操作，以便同时扩展系统的并发处理能力和提升单表的查询性能，就是我们使用到的分库分表。</p><p>如果使用分库分表结合使用的话，不能简单进行order_id 取模操作，需要加一个中间变量用来打散到不同的子表，公式如下：</p><p><img src="\images\depotsTable\depots5.png" alt=""></p><p>中间变量　＝ shard key %（库数量*单个库的表数量）;2库序号　＝　取整（中间变量／单</p><p>例如：数据库有10个，每一个库中有100个数据表，用户的order_id＝1001，按照上述的路由策略，可得：</p><p><img src="\images\depotsTable\depots6.png" alt=""></p><p>这样的话，对于order_id＝1001，将被路由到第1个数据库的第2个表中(索引0 代表1，依次类推)。</p><p><img src="\images\depotsTable\depots7.png" alt=""></p><h1 id="三、整体架构设计"><a href="#三、整体架构设计" class="headerlink" title="三、整体架构设计"></a><strong>三、整体架构设计</strong></h1><p><img src="\images\depotsTable\depots8.png" alt=""></p><p>从图中我们将请求分成read和write请求，write请求比较简单，就是根据分库分表规则写入db即可。</p><p>对于read请求，我们需要计算出查询的是热数据还是冷数据，一般order_id生成规则如下，“商户所在地区号+时间戳+随机数”，我们可以根据时间戳计算出查询的是热数据还是冷数据，（当然具体业务需要具体对待，这里不再详细阐述）</p><p>另外架构图中的冷数据指的是3个月~12个月前的数据，如果是查询一年前的数据，建议直接离线查hive即可。</p><p>图中有一个定时Job，主要用来定时迁移订单数据，需要将冷数据分别迁移到ES和hive中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;\images\depotsTable\depots0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、背景&lt;/st
      
    
    </summary>
    
      <category term="java" scheme="https://xushugen.github.io/categories/java/"/>
    
    
      <category term="分库分表设计思路" scheme="https://xushugen.github.io/tags/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>单点登录原理与简单实现</title>
    <link href="https://xushugen.github.io/2018/09/21/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%8E%9F%E7%90%86%E4%B8%8E%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <id>https://xushugen.github.io/2018/09/21/单点登录原理与简单实现/</id>
    <published>2018-09-21T01:08:38.000Z</published>
    <updated>2018-09-21T05:48:02.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-单系统登录机制"><a href="#一、-单系统登录机制" class="headerlink" title="一、 单系统登录机制"></a>一、 单系统登录机制</h1><h2 id="1、http无状态协议"><a href="#1、http无状态协议" class="headerlink" title="1、http无状态协议"></a>1、http无状态协议</h2><p>   web应用采用browser/server架构，http作为通信协议。http是无状态协议，浏览器的每一次请求，服务器会独立处理，不与之前或之后的请求产生关联，这个过程用下图说明，三次请求/响应对之间没有任何联系<br><img src="/images/sso/sso.png" alt="单点登录原理"></p><p>  但这也同时意味着，任何用户都能通过浏览器访问服务器资源，如果想保护服务器的某些资源，必须限制浏览器请求；要限制浏览器请求，必须鉴别浏览器请求，响应合法请求，忽略非法请求；要鉴别浏览器请求，必须清楚浏览器请求状态。既然http协议无状态，那就让服务器和浏览器共同维护一个状态吧！这就是会话机制.</p><h2 id="2、会话机制"><a href="#2、会话机制" class="headerlink" title="2、会话机制"></a>2、会话机制</h2><p>  浏览器第一次请求服务器，服务器创建一个会话，并将会话的id作为响应的一部分发送给浏览器，浏览器存储会话id，并在后续第二次和第三次请求中带上会话id，服务器取得请求中的会话id就知道是不是同一个用户了，这个过程用下图说明，后续请求与第一次请求产生了关联.<br><img src="/images/sso/sso1.png" alt="单点登录原理-会话机制"></p><p>服务器在内存中保存会话对象，浏览器怎么保存会话id呢？你可能会想到两种方式</p><h3 id="1-请求参数"><a href="#1-请求参数" class="headerlink" title="1. 请求参数"></a>1. 请求参数</h3><h3 id="2-cookie"><a href="#2-cookie" class="headerlink" title="2. cookie"></a>2. cookie</h3><p>将会话id作为每一个请求的参数，服务器接收请求自然能解析参数获得会话id，并借此判断是否来自同一会话，很明显，这种方式不靠谱。那就浏览器自己来维护这个会话id吧，每次发送http请求时浏览器自动发送会话id，cookie机制正好用来做这件事。cookie是浏览器用来存储少量数据的一种机制，数据以”key/value“形式存储，浏览器发送http请求时自动附带cookie信息.</p><p>tomcat会话机制当然也实现了cookie，访问tomcat服务器时，浏览器中可以看到一个名为“JSESSIONID”的cookie，这就是tomcat会话机制维护的会话id，使用了cookie的请求响应过程如下图<br><img src="/images/sso/sso2.png" alt="单点登录原理-cookie"></p><h2 id="3、登录状态"><a href="#3、登录状态" class="headerlink" title="3、登录状态"></a>3、登录状态</h2><p>有了会话机制，登录状态就好明白了，我们假设浏览器第一次请求服务器需要输入用户名与密码验证身份，服务器拿到用户名密码去数据库比对，正确的话说明当前持有这个会话的用户是合法用户，应该将这个会话标记为“已授权”或者“已登录”等等之类的状态，既然是会话的状态，自然要保存在会话对象中，tomcat在会话对象中设置登录状态如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br><span class="line">session.setAttribute(<span class="string">"isLogin"</span>, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>用户再次访问时，tomcat在会话对象中查看登录状态<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br><span class="line">session.getAttribute(<span class="string">"isLogin"</span>);</span><br></pre></td></tr></table></figure></p><p>实现了登录状态的浏览器请求服务器模型如下图描述<br><img src="/images/sso/sso3.png" alt="单点登录原理-浏览器"></p><p>每次请求受保护资源时都会检查会话对象中的登录状态，只有 isLogin=true 的会话才能访问，登录机制因此而实现。</p><h1 id="二、多系统的复杂性"><a href="#二、多系统的复杂性" class="headerlink" title="二、多系统的复杂性"></a>二、多系统的复杂性</h1><p>web系统早已从久远的单系统发展成为如今由多系统组成的应用群，面对如此众多的系统，用户难道要一个一个登录、然后一个一个注销吗？就像下图描述的这样</p><p><img src="/images/sso/sso4.png" alt="单点登录原理-多系统"></p><p>web系统由单系统发展成多系统组成的应用群，复杂性应该由系统内部承担，而不是用户。无论web系统内部多么复杂，对用户而言，都是一个统一的整体，也就是说，用户访问web系统的整个应用群与访问单个系统一样，登录/注销只要一次就够了.</p><p><img src="/images/sso/sso5.png" alt="单点登录原理-多系统"></p><p>虽然单系统的登录解决方案很完美，但对于多系统应用群已经不再适用了，为什么呢？</p><p>单系统登录解决方案的核心是cookie，cookie携带会话id在浏览器与服务器之间维护会话状态。但cookie是有限制的，这个限制就是cookie的域（通常对应网站的域名），浏览器发送http请求时会自动携带与该域匹配的cookie，而不是所有cookie.</p><p><img src="/images/sso/sso6.png" alt="单点登录原理-多系统"></p><p>既然这样，为什么不将web应用群中所有子系统的域名统一在一个顶级域名下，例如“*.baidu.com”，然后将它们的cookie域设置为“baidu.com”，这种做法理论上是可以的，甚至早期很多多系统登录就采用这种同域名共享cookie的方式。</p><p>　　然而，可行并不代表好，共享cookie的方式存在众多局限。首先，应用群域名得统一；其次，应用群各系统使用的技术（至少是web服务器）要相同，不然cookie的key值（tomcat为JSESSIONID）不同，无法维持会话，共享cookie的方式是无法实现跨语言技术平台登录的，比如java、php、.net系统之间；第三，cookie本身不安全。</p><p>　　因此，我们需要一种全新的登录方式来实现多系统应用群的登录，这就是单点登录.</p><h1 id="三、单点登录"><a href="#三、单点登录" class="headerlink" title="三、单点登录"></a>三、单点登录</h1><p>什么是单点登录？单点登录全称Single Sign On（以下简称SSO），是指在多系统应用群中登录一个系统，便可在其他所有系统中得到授权而无需再次登录，包括单点登录与单点注销两部分.</p><h2 id="1、登录"><a href="#1、登录" class="headerlink" title="1、登录"></a>1、登录</h2><p>相比于单系统登录，sso需要一个独立的认证中心，只有认证中心能接受用户的用户名密码等安全信息，其他系统不提供登录入口，只接受认证中心的间接授权。间接授权通过令牌实现，sso认证中心验证用户的用户名密码没问题，创建授权令牌，在接下来的跳转过程中，授权令牌作为参数发送给各个子系统，子系统拿到令牌，即得到了授权，可以借此创建局部会话，局部会话登录方式与单系统的登录方式相同。这个过程，也就是单点登录的原理，用下图说明.<br><img src="/images/sso/sso7.png" alt="单点登录原理-多系统"></p><p>下面对上图简要描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">用户访问系统1的受保护资源，系统1发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</span><br><span class="line">sso认证中心发现用户未登录，将用户引导至登录页面</span><br><span class="line">用户输入用户名密码提交登录申请</span><br><span class="line">sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权令牌</span><br><span class="line">sso认证中心带着令牌跳转会最初的请求地址（系统1）</span><br><span class="line">系统1拿到令牌，去sso认证中心校验令牌是否有效</span><br><span class="line">sso认证中心校验令牌，返回有效，注册系统1</span><br><span class="line">系统1使用该令牌创建与用户的会话，称为局部会话，返回受保护资源</span><br><span class="line">用户访问系统2的受保护资源</span><br><span class="line">系统2发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</span><br><span class="line">sso认证中心发现用户已登录，跳转回系统2的地址，并附上令牌</span><br><span class="line">系统2拿到令牌，去sso认证中心校验令牌是否有效</span><br><span class="line">sso认证中心校验令牌，返回有效，注册系统2</span><br><span class="line">系统2使用该令牌创建与用户的局部会话，返回受保护资源</span><br></pre></td></tr></table></figure><p>用户登录成功之后，会与sso认证中心及各个子系统建立会话，用户与sso认证中心建立的会话称为全局会话，用户与各个子系统建立的会话称为局部会话，局部会话建立之后，用户访问子系统受保护资源将不再通过sso认证中心，全局会话与局部会话有如下约束关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.局部会话存在，全局会话一定存在</span><br><span class="line">2.全局会话存在，局部会话不一定存在</span><br><span class="line">3.全局会话销毁，局部会话必须销毁</span><br></pre></td></tr></table></figure><p>你可以通过博客园、百度、csdn、淘宝等网站的登录过程加深对单点登录的理解，注意观察登录过程中的跳转url与参数</p><h2 id="2、注销"><a href="#2、注销" class="headerlink" title="2、注销"></a>2、注销</h2><p>单点登录自然也要单点注销，在一个子系统中注销，所有子系统的会话都将被销毁，用下面的图来说明<br><img src="/images/sso/sso8.png" alt="单点登录原理-注销"><br>sso认证中心一直监听全局会话的状态，一旦全局会话销毁，监听器将通知所有注册系统执行注销操作。</p><p>下面对上图简要说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.用户向系统1发起注销请求</span><br><span class="line">2.系统1根据用户与系统1建立的会话id拿到令牌，向sso认证中心发起注销请求</span><br><span class="line">3.sso认证中心校验令牌有效，销毁全局会话，同时取出所有用此令牌注册的系统地址</span><br><span class="line">4.sso认证中心向所有注册系统发起注销请求</span><br><span class="line">5.各注册系统接收sso认证中心的注销请求，销毁局部会话</span><br><span class="line">6.sso认证中心引导用户至登录页面</span><br></pre></td></tr></table></figure><h1 id="四、部署图"><a href="#四、部署图" class="headerlink" title="四、部署图"></a>四、部署图</h1><p>​    单点登录涉及sso认证中心与众子系统，子系统与sso认证中心需要通信以交换令牌、校验令牌及发起注销请求，因而子系统必须集成sso的客户端，sso认证中心则是sso服务端，整个单点登录过程实质是sso客户端与服务端通信的过程，用下图描述</p><p><img src="/images/sso/sso9.png" alt="单点登录原理-部署"></p><p>​    sso认证中心与sso客户端通信方式有多种，这里以简单好用的httpClient为例，web service、rpc、restful api都可以。</p><h1 id="五、实现"><a href="#五、实现" class="headerlink" title="五、实现"></a>五、实现</h1><p>​    只是简要介绍下基于java的实现过程，不提供完整源码，明白了原理，我相信你们可以自己实现。sso采用客户端/服务端架构，我们先看sso-client与sso-server要实现的功能（下面：sso认证中心=sso-server）</p><p>​    sso-client</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.拦截子系统未登录用户请求，跳转至sso认证中心</span><br><span class="line">2.接收并存储sso认证中心发送的令牌</span><br><span class="line">3.与sso-server通信，校验令牌的有效性</span><br><span class="line">4.建立局部会话</span><br><span class="line">5.拦截用户注销请求，向sso认证中心发送注销请求</span><br><span class="line">6.接收sso认证中心发出的注销请求，销毁局部会话</span><br></pre></td></tr></table></figure><p>　　sso-server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.验证用户的登录信息</span><br><span class="line">2.创建全局会话</span><br><span class="line">3.创建授权令牌</span><br><span class="line">4.与sso-client通信发送令牌</span><br><span class="line">5.校验sso-client令牌有效性</span><br><span class="line">6.系统注册</span><br><span class="line">7.接收sso-client注销请求，注销所有会话</span><br></pre></td></tr></table></figure><p>接下来，我们按照原理来一步步实现sso吧！</p><h3 id="1、sso-client拦截未登录请求"><a href="#1、sso-client拦截未登录请求" class="headerlink" title="1、sso-client拦截未登录请求"></a>1、sso-client拦截未登录请求</h3><p>​    java拦截请求的方式有servlet、filter、listener三种方式，我们采用filter。在sso-client中新建LoginFilter.java类并实现Filter接口，在doFilter()方法中加入对未登录用户的拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">    HttpServletResponse res = (HttpServletResponse) response;</span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> (session.getAttribute(<span class="string">"isLogin"</span>)) &#123;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跳转至sso认证中心</span></span><br><span class="line">    res.sendRedirect(<span class="string">"sso-server-url-with-system-url"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、sso-server拦截未登录请求"><a href="#2、sso-server拦截未登录请求" class="headerlink" title="2、sso-server拦截未登录请求"></a>2、sso-server拦截未登录请求</h3><p>​    拦截从sso-client跳转至sso认证中心的未登录请求，跳转至登录页面，这个过程与sso-client完全一样.</p><h3 id="3、sso-server验证用户登录信息"><a href="#3、sso-server验证用户登录信息" class="headerlink" title="3、sso-server验证用户登录信息"></a>3、sso-server验证用户登录信息</h3><p>​    用户在登录页面输入用户名密码，请求登录，sso认证中心校验用户信息，校验成功，将会话状态标记为“已登录”.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password, HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.checkLoginInfo(username, password);</span><br><span class="line">    req.getSession().setAttribute(<span class="string">"isLogin"</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、sso-server创建授权令牌"><a href="#4、sso-server创建授权令牌" class="headerlink" title="4、sso-server创建授权令牌"></a>4、sso-server创建授权令牌</h3><p>​    授权令牌是一串随机字符，以什么样的方式生成都没有关系，只要不重复、不易伪造即可，下面是一个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String token = UUID.randomUUID().toString();</span><br></pre></td></tr></table></figure><h3 id="5、sso-client取得令牌并校验"><a href="#5、sso-client取得令牌并校验" class="headerlink" title="5、sso-client取得令牌并校验"></a>5、sso-client取得令牌并校验</h3><p>​    sso认证中心登录后，跳转回子系统并附上令牌，子系统（sso-client）取得令牌，然后去sso认证中心校验，在LoginFilter.java的doFilter()中添加几行.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求附带token参数</span></span><br><span class="line">String token = req.getParameter(<span class="string">"token"</span>);</span><br><span class="line"><span class="keyword">if</span> (token != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 去sso认证中心校验token</span></span><br><span class="line">    <span class="keyword">boolean</span> verifyResult = <span class="keyword">this</span>.verify(<span class="string">"sso-server-verify-url"</span>, token);</span><br><span class="line">    <span class="keyword">if</span> (!verifyResult) &#123;</span><br><span class="line">        res.sendRedirect(<span class="string">"sso-server-url"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>verify()方法使用httpClient实现，这里仅简略介绍，httpClient详细使用方法请参考官方文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpPost httpPost = <span class="keyword">new</span> HttpPost(<span class="string">"sso-server-verify-url-with-token"</span>);</span><br><span class="line">HttpResponse httpResponse = httpClient.execute(httpPost);</span><br></pre></td></tr></table></figure><h3 id="6、sso-server接收并处理校验令牌请求"><a href="#6、sso-server接收并处理校验令牌请求" class="headerlink" title="6、sso-server接收并处理校验令牌请求"></a>6、sso-server接收并处理校验令牌请求</h3><p>​    用户在sso认证中心登录成功后，sso-server创建授权令牌并存储该令牌，所以，sso-server对令牌的校验就是去查找这个令牌是否存在以及是否过期，令牌校验成功后sso-server将发送校验请求的系统注册到sso认证中心（就是存储起来的意思）</p><p>　　令牌与注册系统地址通常存储在key-value数据库（如redis）中，redis可以为key设置有效时间也就是令牌的有效期。redis运行在内存中，速度非常快，正好sso-server不需要持久化任何数据。</p><p>　　令牌与注册系统地址可以用下图描述的结构存储在redis中，可能你会问，为什么要存储这些系统的地址？如果不存储，注销的时候就麻烦了，用户向sso认证中心提交注销请求，sso认证中心注销全局会话，但不知道哪些系统用此全局会话建立了自己的局部会话，也不知道要向哪些子系统发送注销请求注销局部会话.</p><p><img src="/images/sso/sso10.png" alt="单点登录原理-部署"></p><h3 id="7、sso-client校验令牌成功创建局部会话"><a href="#7、sso-client校验令牌成功创建局部会话" class="headerlink" title="7、sso-client校验令牌成功创建局部会话"></a>7、sso-client校验令牌成功创建局部会话</h3><p>​    令牌校验成功后，sso-client将当前局部会话标记为“已登录”，修改LoginFilter.java，添加几行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (verifyResult) &#123;</span><br><span class="line">    session.setAttribute(<span class="string">"isLogin"</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sso-client还需将当前会话id与令牌绑定，表示这个会话的登录状态与令牌相关，此关系可以用java的hashmap保存，保存的数据用来处理sso认证中心发来的注销请求</p><h3 id="8、注销过程"><a href="#8、注销过程" class="headerlink" title="8、注销过程"></a>8、注销过程</h3><p>​    用户向子系统发送带有“logout”参数的请求（注销请求），sso-client拦截器拦截该请求，向sso认证中心发起注销请求.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String logout = req.getParameter(<span class="string">"logout"</span>);</span><br><span class="line"><span class="keyword">if</span> (logout != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.ssoServer.logout(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sso认证中心也用同样的方式识别出sso-client的请求是注销请求（带有“logout”参数），sso认证中心注销全局会话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/logout"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line">    <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">        session.invalidate();<span class="comment">//触发LogoutListener</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sso认证中心有一个全局会话的监听器，一旦全局会话注销，将通知所有注册系统注销</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent event)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过httpClient向所有注册系统发送注销请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、-单系统登录机制&quot;&gt;&lt;a href=&quot;#一、-单系统登录机制&quot; class=&quot;headerlink&quot; title=&quot;一、 单系统登录机制&quot;&gt;&lt;/a&gt;一、 单系统登录机制&lt;/h1&gt;&lt;h2 id=&quot;1、http无状态协议&quot;&gt;&lt;a href=&quot;#1、http无状态协
      
    
    </summary>
    
      <category term="java" scheme="https://xushugen.github.io/categories/java/"/>
    
    
      <category term="sso" scheme="https://xushugen.github.io/tags/sso/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins自动化部署maven项目</title>
    <link href="https://xushugen.github.io/2018/09/20/Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2maven%E9%A1%B9%E7%9B%AE/"/>
    <id>https://xushugen.github.io/2018/09/20/Jenkins自动化部署maven项目/</id>
    <published>2018-09-20T13:45:50.000Z</published>
    <updated>2018-09-21T05:27:03.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jenkins-是什么？"><a href="#Jenkins-是什么？" class="headerlink" title="Jenkins 是什么？"></a>Jenkins 是什么？</h1><ul><li><a href="https://jenkins.io/" target="_blank" rel="noopener">Jenkins官网</a></li><li>领先的开源自动化服务器，提供数百个插件来支持构建，部署和自动化任何项目</li><li>我的理解：将频繁，琐碎的部署自动化，解决重复工作</li></ul><h1 id="为什么要用-Jenkins？"><a href="#为什么要用-Jenkins？" class="headerlink" title="为什么要用 Jenkins？"></a>为什么要用 Jenkins？</h1><ul><li>开发的时候，会重复的去部署项目，手动的部署效率低</li><li>手动部署，版本的迭代不能持续记录</li><li>用两个字来解释 <strong>省事</strong></li></ul><h1 id="搭建环境以及准备工作"><a href="#搭建环境以及准备工作" class="headerlink" title="搭建环境以及准备工作"></a>搭建环境以及准备工作</h1><ul><li>服务器 <code>centos7</code></li><li>java环境 <code>jdk1.8</code></li><li>maven <code>3.3.9</code></li><li>git <code>1.8.3.1</code></li><li>jenkins <code>2.121.1</code></li></ul><h1 id="安装jenkins并启动服务"><a href="#安装jenkins并启动服务" class="headerlink" title="安装jenkins并启动服务"></a>安装jenkins并启动服务</h1><ul><li><p>先导入仓库</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line">rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure></li><li><p>安装 <code>yum install jenkins</code> 最好加上sudo</p></li><li><p>在配置文件中修改jre路径 <code>vim /etc/rc.d/init.d/jenkins</code>，输入/java快速定位</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Search usable Java. We do this because various reports indicated</span><br><span class="line"><span class="meta">#</span> that /usr/bin/java may not always point to Java &gt;= 1.6</span><br><span class="line"><span class="meta">#</span> see http://www.nabble.com/guinea-pigs-wanted-----Hudson-RPM-for-RedHat-Linux-td25673707.html</span><br><span class="line">candidates="</span><br><span class="line">/etc/alternatives/java</span><br><span class="line">/usr/lib/jvm/java-1.6.0/bin/java</span><br><span class="line">/usr/lib/jvm/jre-1.6.0/bin/java</span><br><span class="line">/usr/lib/jvm/java-1.7.0/bin/java</span><br><span class="line">/usr/lib/jvm/jre-1.7.0/bin/java</span><br><span class="line">/usr/lib/jvm/java-1.8.0/bin/java</span><br><span class="line">/usr/lib/jvm/jre-1.8.0/bin/java</span><br><span class="line">/usr/bin/java</span><br><span class="line">输入你本机的jdk地址</span><br></pre></td></tr></table></figure></li><li><p>启动Jenkins服务</p></li><li><p>访问服务 <code>http://IP地址:8080/</code></p></li><li><p>更改端口和root权限 <code>vim /etc/sysconfig/jenkins</code> 、<code>JENKINS_USER=&quot;root&quot;</code>、<code>JENKINS_PORT=&quot;9999&quot;</code></p></li><li><p>验证用户 <code>cat /var/lib/jenkins/secrets/initialAdminPassword</code></p></li><li><p>卸载 <code>yum remove jenkins</code></p></li></ul><h1 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h1><ul><li>首页 -&gt; 系统管理 -&gt; 管理插件 -&gt; 可选插件</li><li>Git Parameter Plug-In-用于git选择分支</li><li>Maven Integration plugin</li></ul><h1 id="配置任务-直接上图"><a href="#配置任务-直接上图" class="headerlink" title="配置任务 直接上图"></a>配置任务 直接上图</h1><h2 id="全局工具配置-首页-gt-系统管理-gt-全局工具配置"><a href="#全局工具配置-首页-gt-系统管理-gt-全局工具配置" class="headerlink" title="全局工具配置 首页-&gt;系统管理-&gt;全局工具配置"></a>全局工具配置 <code>首页-&gt;系统管理-&gt;全局工具配置</code></h2><p><img src="/images/jenkins/jenkins01.png" alt=""></p><h2 id="project配置-首页-gt-项目-gt-配置"><a href="#project配置-首页-gt-项目-gt-配置" class="headerlink" title="project配置 首页-&gt;项目-&gt;配置"></a>project配置 <code>首页-&gt;项目-&gt;配置</code></h2><p><img src="/images/jenkins/jenkins02.png" alt=""></p><h1 id="shell-脚本"><a href="#shell-脚本" class="headerlink" title="shell 脚本"></a>shell 脚本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>需要配置如下参数</span><br><span class="line"><span class="meta">#</span> 项目路径, 在Execute Shell中配置项目路径, pwd 就可以获得该项目路径</span><br><span class="line"><span class="meta">#</span> export PROJ_PATH=这个jenkins任务在部署机器上的路径</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 输入你的环境上tomcat的全路径</span><br><span class="line"><span class="meta">#</span> export TOMCAT_APP_PATH=tomcat在部署机器上的路径 /tomcat/tomcat-8084/webapps</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>## base 函数</span><br><span class="line">killTomcat()</span><br><span class="line">&#123;</span><br><span class="line">    pid=`ps -ef|grep tomcat|grep java|grep 8084|awk '&#123;print $2&#125;'`</span><br><span class="line">    echo "tomcat Id list :$pid"</span><br><span class="line">    if [ "$pid" = "" ]</span><br><span class="line">    then</span><br><span class="line">        echo "no tomcat pid alive"</span><br><span class="line">    else</span><br><span class="line">        kill -9 $pid</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line">cd $PROJ_PATH/order</span><br><span class="line">mvn clean install -Dmaven.test.skip=true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 停tomcat</span><br><span class="line">killTomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除原有工程</span><br><span class="line">rm -rf $TOMCAT_APP_PATH/webapps/ROOT</span><br><span class="line">rm -f $TOMCAT_APP_PATH/webapps/ROOT.war</span><br><span class="line">rm -f $TOMCAT_APP_PATH/webapps/order.war</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 复制新的工程</span><br><span class="line">cp $PROJ_PATH/order/target/order.war $TOMCAT_APP_PATH/webapps/</span><br><span class="line"></span><br><span class="line">cd $TOMCAT_APP_PATH/webapps/</span><br><span class="line">mv order.war ROOT.war</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 启动Tomcat</span><br><span class="line">cd $TOMCAT_APP_PATH/</span><br><span class="line">sh bin/startup.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Jenkins-是什么？&quot;&gt;&lt;a href=&quot;#Jenkins-是什么？&quot; class=&quot;headerlink&quot; title=&quot;Jenkins 是什么？&quot;&gt;&lt;/a&gt;Jenkins 是什么？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jenkins
      
    
    </summary>
    
      <category term="java" scheme="https://xushugen.github.io/categories/java/"/>
    
    
      <category term="Jenkins" scheme="https://xushugen.github.io/tags/Jenkins/"/>
    
  </entry>
  
</feed>
